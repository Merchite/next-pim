// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  image     String?
  email     String   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  accounts  Account[]
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token  String? @db.String
  expires_at  Int?
  token_type  String?
  scope     String?
  id_token  String?
  session_state String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken  String @unique
  userId    String   @db.ObjectId
  expires   DateTime

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  identifier String
  token     String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  vendor    String?
  price     Float
  msrp      Float?
  cost      Float?
  image     String?
  description String?
  categoryId String @db.ObjectId
  sku       String?
  barcode   String?
  quantity  Int?
  tags      String[]
  status    String?
  channel   String[]
  needsRefinement Boolean @default(false)

  category Category[]
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name     String
  image    String?
  parent   String?
  description String?
  tags     String[]
  status   String?
  channel  String[]
  
  productId String @db.ObjectId
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)

}